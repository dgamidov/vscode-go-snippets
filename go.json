{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Main package": {
		"prefix": ["main"],
		"body": [
			"package main",
			"",
			"func main() {",
			"\t$0",
			"}",
		],
		"description": "Main package"
	},
	"Return err if err != nil": {
		"prefix": ["e"],
		"body": [
			"if err != nil {",
			"\treturn err",
			"}",
			"$0",
		]
	},
	"Return wrapped err if err != nil": {
		"prefix": ["ew"],
		"body": [
			"if err != nil {",
			"\treturn nil, fmt.Errorf(\"%s: %w\", op, err)",
			"}",
			"$0",
		]
	},
	"Expected an error but got nil": {
		"prefix": "ee",
		"body": "t.Errorf(\"expected an error, but got nil\")"
	},
	"Log.Fatalf if err != nil": {
		"prefix": ["elff"],
		"body": [
			"if err != nil {",
			"\tlog.Fatalf(\"%s\", err)",
			"}",
			"$0",
		]
	},
	"t.Errorf if err != nil": {
		"prefix": ["te"],
		"body": [
			"if err != nil {",
			"\tt.Errorf(\"expected no errors, but got error: %s\", err)",
			"}",
			"$0",
		]
	},
	"t.Errorf if err != nil": {
		"prefix": ["ten"],
		"body": [
			"if err == nil {",
			"\tt.Errorf(\"expected an error, but got nil\")",
			"}",
			"$0",
		]
	},
	"t.Fatalf if err != nil": {
		"prefix": ["tf"],
		"body": [
			"if err != nil {",
			"\tt.Fatalf(\"expected no errors, but got error: %s\", err)",
			"}",
			"$0",
		]
	},
	"Test table": {
		"prefix": ["tt"],
		"body": [
			"for _, d := range data {",
			"\tt.Run(d.name, func(t *testing.T) {",
			"\t\tresult, err := $1",
			"\t\tif result != d.expected {",
			"\t\t\tt.Errorf(\"Expected %d, got %d\", d.expected, result)",
			"\t\t}",
			"\t\tvar errMsg string",
			"\t\tif err != nil {",
			"\t\t\terrMsg = err.Error()",
			"\t\t}",
			"\t\tif errMsg != d.errMsg {",
			"\t\t\tt.Errorf(\"Expected error message `%s`, got `%s`\", d.errMsg, errMsg)",
			"\t\t}",
			"\t})",
			"}",
			"$0",
		]
	},
	"Test wanted": {
		"prefix": ["tw"],
		"body": [
			"wantedError := $1"
			"if err.Error() != wantedError {",
			"\tt.Errorf(\"expected %q, but got %q\", wantedError, err.Error())",
			"}",
			"$0",
		]
	},
	"Test compare": {
		"prefix": ["tcmp"],
		"body": [
			"if diff := cmp.Diff($1, $2); diff != \"\" {",
			"\tt.Errorf(diff)",
			"}",
			"$0",
		]
	},
	"Log.Fatalf": {
		"prefix": ["lff"],
		"body": "log.Fatalf(\"%s\", err)"
	},
	"Open file": {
		"prefix": ["fo"],
		"body": [
			"f, err := os.Open(filename)",
			"if err != nil {",
				"\treturn err",
			"}",
			"defer f.Close()",
			"$0",
		]
	},
	"Open zip for files processing": {
		"prefix": ["zo"],
		"body": [
			"z, err := zip.OpenReader(zipfile)",
			"if err != nil {",
				"\treturn err",
			"}",
			"defer z.Close()",
			"",
			"for _, file := range z.File {",
			"\tf, err := file.Open()",
			"\tif err != nil {",
			"\t\treturn err",
			"\t}",
			"\tdefer f.Close()",
			"\t$0",
			"}",
		]
	},
	"Do post request": {
		"prefix": ["post"],
		"body": [
			"client := &http.Client{}",
			"req, err := http.NewRequest(\"POST\", url, body)",
			"req.Header.Add(\"Accept-Encoding\", \"gzip\")",
			"resp, err := client.Do(req)",
			"if err != nil {",
			"\treturn fmt.Errorf(\"failed to do request: %s\", err)",
			"}",
			"defer func(Body io.ReadCloser) {",
			"\terr := Body.Close()",
			"\tif err != nil {",
			"\t\tlog.Printf(\"Failed to close body: %s\", err)",
			"\t}",
			"}(resp.Body)",
			"$0",
		]
	},
	"Do get request": {
		"prefix": ["get"],
		"body": [
			"client := &http.Client{}",
			"req, err := http.NewRequest(\"GET\", url)",
			"resp, err := client.Do(req)",
			"if err != nil {",
			"\treturn fmt.Errorf(\"failed to do request: %s\", err)",
			"}",
			"defer func(Body io.ReadCloser) {",
			"\terr := Body.Close()",
			"\tif err != nil {",
			"\t\tlog.Printf(\"Failed to close body: %s\", err)",
			"\t}",
			"}(resp.Body)",
			"$0",
		]
	},
	"Read response body all": {
		"prefix": ["rrba"],
		"body": [
			"b, err := io.ReadAll(resp.Body)",
			"if err != nil {",
			"\treturn fmt.Errorf(\"failed to read http response body: %s\", err)",
			"}",
			"$0",
		]
	},
	"Read line by line": {
		"prefix": ["rlbl"],
		"body": [
			"var rows int",
			"",
			"r := bufio.NewReader($1)",
			"for {",
			"\tline, err := r.ReadString('\\n')",
			"\tif err == io.EOF {",
			"\t\tlog.Printf(\"Got EOF\")",
			"\t\tbreak",
			"\t}",
			"\tif err != nil {",
			"\t\treturn err",
			"\t}",
			"\tif len(line) == 0 {",
			"\t\treturn fmt.Errorf(\"got line with zero length\")",
			"\t}",
			"\t$0",
			"\trows++",
			"}"
		]
	},
	"Walk dir return files": {
		"prefix": ["wd"],
		"body": [
			"files := make([]string, 0, 10)",
			"",
			"err := filepath.WalkDir(dir, func(path string, d os.DirEntry, err error) error {",
			"\tif !d.IsDir() {",
			"\t\tfullPath := fmt.Sprintf(\"%s/%s\", path, d.Name())",
			"\t\tfiles = append(files, fullPath)",
			"\t}",
			"return nil",
			"})",
			"if err != nil {",
			"\treturn files, err",
			"}",
			"$0",
		]
	},
	"Regexp one line": {
		"prefix": ["reone"],
		"body": [
			"re := regexp.MustCompile(`$1`)",
			"m := re.FindString(line)",
			"if m == \"\" {",
			"\t$2",
			"}",
			"$0",
		]
	},
	"Flag": {
		"prefix": ["flg"],
		"body": [
			"var sep = flag.String(\"s\", \" \", \"separator\")",
			"flag.Parse()",
			"fmt.Printf(\"Separator: %s\n\", *sep)",
			"$0",
		]
	},
	"JSON struct": {
		"prefix": ["json"],
		"body": "`json:\"$0\"`"
	},
	"Timestamp now": {
		"prefix": ["tsnow"],
		"body": "time.Now().Unix()"
	},
	"Time sleep": {
		"prefix": ["ts"],
		"body": "time.Sleep(time.Duration(1 * time.Second))"
	},
	"Operation": {
		"prefix": ["op"],
		"body": "const op = \"$0\""
	},
	"Log struct": {
		"prefix": ["ls"],
		"body": "log.Printf(\"%+v\", $0)"
	},
	"Gosec ignore": {
		"prefix": ["ns"],
		"body": "//#nosec CWE-676$0"
	}
}